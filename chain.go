// Code generated by gen-chains tool. DO NOT EDIT.

package pump

// Chain2 composes 2 pipeline stages into one.
func Chain2[A, B, C any](s1 Stage[A, B], s2 Stage[B, C]) Stage[A, C] {
	return func(src Gen[A], yield func(C) error) error {
		return s2(Bind(src, s1), yield)
	}
}

// Chain3 composes 3 pipeline stages into one.
func Chain3[A, B, C, D any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D]) Stage[A, D] {
	return Chain2(Chain2(s1, s2), s3)
}

// Chain4 composes 4 pipeline stages into one.
func Chain4[A, B, C, D, E any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E]) Stage[A, E] {
	return Chain2(Chain3(s1, s2, s3), s4)
}

// Chain5 composes 5 pipeline stages into one.
func Chain5[A, B, C, D, E, F any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F]) Stage[A, F] {
	return Chain2(Chain4(s1, s2, s3, s4), s5)
}

// Chain6 composes 6 pipeline stages into one.
func Chain6[A, B, C, D, E, F, G any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G]) Stage[A, G] {
	return Chain2(Chain5(s1, s2, s3, s4, s5), s6)
}

// Chain7 composes 7 pipeline stages into one.
func Chain7[A, B, C, D, E, F, G, H any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H]) Stage[A, H] {
	return Chain2(Chain6(s1, s2, s3, s4, s5, s6), s7)
}

// Chain8 composes 8 pipeline stages into one.
func Chain8[A, B, C, D, E, F, G, H, I any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H], s8 Stage[H, I]) Stage[A, I] {
	return Chain2(Chain7(s1, s2, s3, s4, s5, s6, s7), s8)
}

// Chain9 composes 9 pipeline stages into one.
func Chain9[A, B, C, D, E, F, G, H, I, J any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H], s8 Stage[H, I], s9 Stage[I, J]) Stage[A, J] {
	return Chain2(Chain8(s1, s2, s3, s4, s5, s6, s7, s8), s9)
}

// Chain10 composes 10 pipeline stages into one.
func Chain10[A, B, C, D, E, F, G, H, I, J, K any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H], s8 Stage[H, I], s9 Stage[I, J], s10 Stage[J, K]) Stage[A, K] {
	return Chain2(Chain9(s1, s2, s3, s4, s5, s6, s7, s8, s9), s10)
}

// Chain11 composes 11 pipeline stages into one.
func Chain11[A, B, C, D, E, F, G, H, I, J, K, L any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H], s8 Stage[H, I], s9 Stage[I, J], s10 Stage[J, K], s11 Stage[K, L]) Stage[A, L] {
	return Chain2(Chain10(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10), s11)
}

// Chain12 composes 12 pipeline stages into one.
func Chain12[A, B, C, D, E, F, G, H, I, J, K, L, M any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H], s8 Stage[H, I], s9 Stage[I, J], s10 Stage[J, K], s11 Stage[K, L], s12 Stage[L, M]) Stage[A, M] {
	return Chain2(Chain11(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11), s12)
}

// Chain13 composes 13 pipeline stages into one.
func Chain13[A, B, C, D, E, F, G, H, I, J, K, L, M, O any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H], s8 Stage[H, I], s9 Stage[I, J], s10 Stage[J, K], s11 Stage[K, L], s12 Stage[L, M], s13 Stage[M, O]) Stage[A, O] {
	return Chain2(Chain12(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12), s13)
}

// Chain14 composes 14 pipeline stages into one.
func Chain14[A, B, C, D, E, F, G, H, I, J, K, L, M, O, P any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H], s8 Stage[H, I], s9 Stage[I, J], s10 Stage[J, K], s11 Stage[K, L], s12 Stage[L, M], s13 Stage[M, O], s14 Stage[O, P]) Stage[A, P] {
	return Chain2(Chain13(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13), s14)
}

// Chain15 composes 15 pipeline stages into one.
func Chain15[A, B, C, D, E, F, G, H, I, J, K, L, M, O, P, Q any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H], s8 Stage[H, I], s9 Stage[I, J], s10 Stage[J, K], s11 Stage[K, L], s12 Stage[L, M], s13 Stage[M, O], s14 Stage[O, P], s15 Stage[P, Q]) Stage[A, Q] {
	return Chain2(Chain14(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14), s15)
}

// Chain16 composes 16 pipeline stages into one.
func Chain16[A, B, C, D, E, F, G, H, I, J, K, L, M, O, P, Q, R any](s1 Stage[A, B], s2 Stage[B, C], s3 Stage[C, D], s4 Stage[D, E], s5 Stage[E, F], s6 Stage[F, G], s7 Stage[G, H], s8 Stage[H, I], s9 Stage[I, J], s10 Stage[J, K], s11 Stage[K, L], s12 Stage[L, M], s13 Stage[M, O], s14 Stage[O, P], s15 Stage[P, Q], s16 Stage[Q, R]) Stage[A, R] {
	return Chain2(Chain15(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15), s16)
}
